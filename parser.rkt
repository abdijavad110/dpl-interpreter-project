#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 59 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 100 149 237 47 47 47 -1 -1
0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 50 205 50 47 47 47 -1 -1 4
1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 1794 0 29 3 12 #"#lang racket"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 1 #" "
0 0 14 3 16 #"parser-tools/lex"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 9 #"prefix-in"
0 0 25 3 1 #" "
0 0 14 3 3 #"re-"
0 0 25 3 1 #" "
0 0 14 3 20 #"parser-tools/lex-sre"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 14 3 17 #"parser-tools/yacc"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 7 #"provide"
0 0 25 3 2 #" ("
0 0 14 3 15 #"all-defined-out"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 1 #" "
0 0 19 3 11 #"\"lexer.rkt\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 7 #"command"
0 0 25 3 4 #" ())"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 12 #"unitcom-expr"
0 0 25 3 1 #" "
0 0 14 3 7 #"command"
0 0 25 3 2 #" ("
0 0 14 3 4 #"ucom"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 18 #"multi-command-expr"
0 0 25 3 1 #" "
0 0 14 3 7 #"command"
0 0 25 3 2 #" ("
0 0 14 3 4 #"mcom"
0 0 25 3 1 #" "
0 0 14 3 4 #"ucom"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 34 #";(define-datatype command command?"
0 0 25 29 1 #"\n"
0 0 17 3 33 #";  (unitcom-expr (ucom unitcom?))"
0 0 25 29 1 #"\n"
0 0 17 3 55 #";  (multi-command-expr (mcom command?) (ucom unitcom?))"
0 0 25 29 1 #"\n"
0 0 17 3 4 #";  )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 7 #"unitcom"
0 0 25 3 4 #" ())"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 13 #"whilecom-expr"
0 0 25 3 1 #" "
0 0 14 3 7 #"unitcom"
0 0 25 3 2 #" ("
0 0 14 3 9 #"whileexpr"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 10 #"ifcom-expr"
0 0 25 3 1 #" "
0 0 14 3 7 #"unitcom"
0 0 25 3 2 #" ("
0 0 14 3 6 #"ifexpr"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 14 #"assigncom-expr"
0 0 25 3 1 #" "
0 0 14 3 7 #"unitcom"
0 0 25 3 2 #" ("
0 0 14 3 10 #"assignexpr"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 14 #"returncom-expr"
0 0 25 3 1 #" "
0 0 14 3 7 #"unitcom"
0 0 25 3 2 #" ("
0 0 14 3 10 #"returnexpr"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 34 #";(define-datatype unitcom unitcom?"
0 0 25 29 1 #"\n"
0 0 17 3 38 #";  (whilecom-expr (while while-expr?))"
0 0 25 29 1 #"\n"
0 0 17 3 29 #";  (ifcom-expr (if if-expr?))"
0 0 25 29 1 #"\n"
0 0 17 3 41 #";  (assigncom-expr (assign assign-expr?))"
0 0 25 29 1 #"\n"
0 0 17 3 41 #";  (returncom-expr (return return-expr?))"
0 0 25 29 1 #"\n"
0 0 17 3 4 #";  )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 10 #"while-expr"
0 0 25 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"com"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 35 #";(define-datatype while while-expr?"
0 0 25 29 1 #"\n"
0 0 17 3 48 #";  (while-expr (exp expression?) (com command?))"
0 0 25 29 1 #"\n"
0 0 17 3 4 #";  )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 7 #"if-expr"
0 0 25 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 25 3 1 #" "
0 0 14 3 4 #"com1"
0 0 25 3 1 #" "
0 0 14 3 4 #"com2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 29 #";(define-datatype if if-expr?"
0 0 25 29 1 #"\n"
0 0 17 3 63
#";  (if-expr (exp1 expression?) (com1 command?) (com2 command?))"
0 0 25 29 1 #"\n"
0 0 17 3 4 #";  )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 11 #"assign-expr"
0 0 25 3 2 #" ("
0 0 14 3 3 #"var"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 37 #";(define-datatype assign assign-expr?"
0 0 25 29 1 #"\n"
0 0 17 3 54 #";  (assign-expr (var symbol?) (exp expression?)) ;TODO"
0 0 25 29 1 #"\n"
0 0 17 3 4 #";  )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 11 #"return-expr"
0 0 25 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 37 #";(define-datatype return return-expr?"
0 0 25 29 1 #"\n"
0 0 17 3 34 #";  (return-expr (exp expression?))"
0 0 25 29 1 #"\n"
0 0 17 3 4 #";  )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 10 #"expression"
0 0 25 3 2 #" ("
0 0 14 3 2 #"a1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 9 #"aexp-expr"
0 0 25 3 1 #" "
0 0 14 3 10 #"expression"
0 0 25 3 4 #" ())"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 13 #"greater?-expr"
0 0 25 3 1 #" "
0 0 14 3 10 #"expression"
0 0 25 3 2 #" ("
0 0 14 3 2 #"a2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 13 #"smaller?-expr"
0 0 25 3 1 #" "
0 0 14 3 10 #"expression"
0 0 25 3 2 #" ("
0 0 14 3 2 #"a2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 11 #"equal?-expr"
0 0 25 3 1 #" "
0 0 14 3 10 #"expression"
0 0 25 3 2 #" ("
0 0 14 3 2 #"a2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 15 #"not-equal?-expr"
0 0 25 3 1 #" "
0 0 14 3 10 #"expression"
0 0 25 3 2 #" ("
0 0 14 3 2 #"a2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 40 #";(define-datatype expression expression?"
0 0 25 29 1 #"\n"
0 0 17 3 32 #";  (aexp-expr (a1 aexpression?))"
0 0 25 29 1 #"\n"
0 0 17 3 54 #";  (greater?-expr (a1 aexpression?) (a2 aexpression?))"
0 0 25 29 1 #"\n"
0 0 17 3 54 #";  (smaller?-expr (a1 aexpression?) (a2 aexpression?))"
0 0 25 29 1 #"\n"
0 0 17 3 52 #";  (equal?-expr (a1 aexpression?) (a2 aexpression?))"
0 0 25 29 1 #"\n"
0 0 17 3 56 #";  (not-equal?-expr (a1 aexpression?) (a2 aexpression?))"
0 0 25 29 1 #"\n"
0 0 17 3 4 #";  )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 11 #"aexpression"
0 0 25 3 2 #" ("
0 0 14 3 2 #"b1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 9 #"bexp-expr"
0 0 25 3 1 #" "
0 0 14 3 11 #"aexpression"
0 0 25 3 4 #" ())"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 10 #"minus-expr"
0 0 25 3 1 #" "
0 0 14 3 11 #"aexpression"
0 0 25 3 2 #" ("
0 0 14 3 2 #"a1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 9 #"plus-expr"
0 0 25 3 1 #" "
0 0 14 3 11 #"aexpression"
0 0 25 3 2 #" ("
0 0 14 3 2 #"a1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 35 #";(define-datatype aexp aexpression?"
0 0 25 29 1 #"\n"
0 0 17 3 32 #";  (bexp-expr (b1 bexpression?))"
0 0 25 29 1 #"\n"
0 0 17 3 51 #";  (minus-expr (b1 bexpression?) (a1 aexpression?))"
0 0 25 29 1 #"\n"
0 0 17 3 50 #";  (plus-expr (b1 bexpression?) (a1 aexpression?))"
0 0 25 29 1 #"\n"
0 0 17 3 4 #";  )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 11 #"bexpression"
0 0 25 3 2 #" ("
0 0 14 3 2 #"c1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 9 #"cexp-expr"
0 0 25 3 1 #" "
0 0 14 3 11 #"bexpression"
0 0 25 3 4 #" ())"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 9 #"mult-expr"
0 0 25 3 1 #" "
0 0 14 3 11 #"bexpression"
0 0 25 3 2 #" ("
0 0 14 3 2 #"b1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 11 #"divide-expr"
0 0 25 3 1 #" "
0 0 14 3 11 #"bexpression"
0 0 25 3 2 #" ("
0 0 14 3 2 #"b1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 35 #";(define-datatype bexp bexpression?"
0 0 25 29 1 #"\n"
0 0 17 3 32 #";  (cexp-expr (c1 cexpression?))"
0 0 25 29 1 #"\n"
0 0 17 3 50 #";  (mult-expr (c1 cexpression?) (b1 bexpression?))"
0 0 25 29 1 #"\n"
0 0 17 3 52 #";  (divide-expr (c1 cexpression?) (b1 bexpression?))"
0 0 25 29 1 #"\n"
0 0 17 3 4 #";  )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 11 #"cexpression"
0 0 25 3 4 #" ())"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 8 #"neg-expr"
0 0 25 3 1 #" "
0 0 14 3 11 #"cexpression"
0 0 25 3 2 #" ("
0 0 14 3 2 #"c1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 8 #"par-expr"
0 0 25 3 1 #" "
0 0 14 3 11 #"cexpression"
0 0 25 3 2 #" ("
0 0 14 3 2 #"c1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 11 #"posnum-expr"
0 0 25 3 1 #" "
0 0 14 3 11 #"cexpression"
0 0 25 3 2 #" ("
0 0 14 3 9 #"posnumber"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 9 #"null-expr"
0 0 25 3 1 #" "
0 0 14 3 11 #"cexpression"
0 0 25 3 4 #" ())"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 9 #"bool-expr"
0 0 25 3 1 #" "
0 0 14 3 11 #"cexpression"
0 0 25 3 2 #" ("
0 0 14 3 3 #"val"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 8 #"var-expr"
0 0 25 3 1 #" "
0 0 14 3 11 #"cexpression"
0 0 25 3 2 #" ("
0 0 14 3 3 #"var"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 11 #"string-expr"
0 0 25 3 1 #" "
0 0 14 3 11 #"cexpression"
0 0 25 3 2 #" ("
0 0 14 3 10 #"string-val"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 9 #"list-expr"
0 0 25 3 1 #" "
0 0 14 3 11 #"cexpression"
0 0 25 3 2 #" ("
0 0 14 3 1 #"l"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 12 #"listmem-expr"
0 0 25 3 1 #" "
0 0 14 3 11 #"cexpression"
0 0 25 3 2 #" ("
0 0 14 3 3 #"var"
0 0 25 3 1 #" "
0 0 14 3 2 #"lm"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 35 #";(define-datatype cexp cexpression?"
0 0 25 29 1 #"\n"
0 0 17 3 31 #";  (neg-expr (c1 cexpression?))"
0 0 25 29 1 #"\n"
0 0 17 3 31 #";  (par-expr (c1 cexpression?))"
0 0 25 29 1 #"\n"
0 0 17 3 39 #";  (posnum-expr (pnum positive?)) ;TODO"
0 0 25 29 1 #"\n"
0 0 17 3 14 #";  (null-expr)"
0 0 25 29 1 #"\n"
0 0 17 3 32 #";  (bool-expr (b string?)) ;TODO"
0 0 25 29 1 #"\n"
0 0 17 3 31 #";  (var-expr (v symbol?)) ;TODO"
0 0 25 29 1 #"\n"
0 0 17 3 28 #";  (string-expr (s string?))"
0 0 25 29 1 #"\n"
0 0 17 3 24 #";  (list-expr (l list?))"
0 0 25 29 1 #"\n"
0 0 17 3 43 #";  (listmem-expr (v string?) (lm listmem?))"
0 0 25 29 1 #"\n"
0 0 17 3 4 #";  )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 8 #"our-list"
0 0 25 3 4 #" ())"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 15 #"listValues-expr"
0 0 25 3 1 #" "
0 0 14 3 8 #"our-list"
0 0 25 3 2 #" ("
0 0 14 3 2 #"lv"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 15 #"empty-list-expr"
0 0 25 3 1 #" "
0 0 14 3 8 #"our-list"
0 0 25 3 4 #" ())"
0 0 25 29 1 #"\n"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 17 3 28 #";(define-datatype list list?"
0 0 25 29 1 #"\n"
0 0 17 3 37 #";  (listValues-expr (lv listValues?))"
0 0 25 29 1 #"\n"
0 0 17 3 20 #";  (empty-list-expr)"
0 0 25 29 1 #"\n"
0 0 17 3 4 #";  )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 10 #"listValues"
0 0 25 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 12 #"val-exp-expr"
0 0 25 3 1 #" "
0 0 14 3 10 #"listValues"
0 0 25 3 4 #" ())"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 24 #"extended-listValues-expr"
0 0 25 3 1 #" "
0 0 14 3 10 #"listValues"
0 0 25 3 2 #" ("
0 0 14 3 2 #"lv"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 40 #";(define-datatype listValues listValues?"
0 0 25 29 1 #"\n"
0 0 17 3 35 #";  (val-exp-expr (exp expression?))"
0 0 25 29 1 #"\n"
0 0 17 3 64
#";  (extended-listValues-expr (exp expression?) (lv listValues?))"
0 0 25 29 1 #"\n"
0 0 17 3 4 #";  )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 7 #"listmem"
0 0 25 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 8 #"idx-expr"
0 0 25 3 1 #" "
0 0 14 3 7 #"listmem"
0 0 25 3 4 #" ())"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 14 #"multi-idx-expr"
0 0 25 3 1 #" "
0 0 14 3 7 #"listmem"
0 0 25 3 2 #" ("
0 0 14 3 2 #"lm"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 34 #";(define-datatype listmem listmem?"
0 0 25 29 1 #"\n"
0 0 17 3 31 #";  (idx-expr (exp expression?))"
0 0 25 29 1 #"\n"
0 0 17 3 51 #";  (multi-idx-expr (exp expression?) (lm listmem?))"
0 0 25 29 1 #"\n"
0 0 17 3 4 #";  )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 10 #"our-parser"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 6 #"parser"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 5 #"start"
0 0 25 3 1 #" "
0 0 14 3 7 #"command"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 3 #"end"
0 0 25 3 1 #" "
0 0 14 3 3 #"EOF"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 14 3 4 #"void"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 6 #"tokens"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 5 #"precs"
0 0 25 3 2 #" ("
0 0 14 3 4 #"left"
0 0 25 3 1 #" "
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 1 #"+"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 5 #"debug"
0 0 25 3 1 #" "
0 0 19 3 11 #"\"input.txt\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 7 #"grammar"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 7 #"command"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 7 #"unitcom"
0 0 25 3 3 #") ("
0 0 14 3 12 #"unitcom-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 7 #"command"
0 0 25 3 1 #" "
0 0 14 3 7 #"SEMICOL"
0 0 25 3 1 #" "
0 0 14 3 7 #"unitcom"
0 0 25 3 3 #") ("
0 0 14 3 18 #"multi-command-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$1"
0 0 25 3 2 #" ("
0 0 14 3 12 #"unitcom-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$3"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 7 #"unitcom"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 8 #"whilecom"
0 0 25 3 3 #") ("
0 0 14 3 13 #"whilecom-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 5 #"ifcom"
0 0 25 3 3 #") ("
0 0 14 3 10 #"ifcom-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 6 #"assign"
0 0 25 3 3 #") ("
0 0 14 3 14 #"assigncom-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 6 #"return"
0 0 25 3 2 #")("
0 0 14 3 14 #"returncom-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$1"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 8 #"whilecom"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 5 #"WHILE"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 14 3 2 #"DO"
0 0 25 3 1 #" "
0 0 14 3 7 #"command"
0 0 25 3 1 #" "
0 0 14 3 3 #"END"
0 0 25 3 3 #") ("
0 0 14 3 10 #"while-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$2"
0 0 25 3 1 #" "
0 0 14 3 2 #"$4"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 5 #"ifcom"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 2 #"IF"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 14 3 4 #"THEN"
0 0 25 3 1 #" "
0 0 14 3 7 #"command"
0 0 25 3 1 #" "
0 0 14 3 4 #"ELSE"
0 0 25 3 1 #" "
0 0 14 3 7 #"command"
0 0 25 3 1 #" "
0 0 14 3 5 #"ENDIF"
0 0 25 3 3 #") ("
0 0 14 3 7 #"if-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$2"
0 0 25 3 1 #" "
0 0 14 3 2 #"$4"
0 0 25 3 1 #" "
0 0 14 3 2 #"$6"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 6 #"assign"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 8 #"VARIABLE"
0 0 25 3 1 #" "
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 11 #"assign-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$1"
0 0 25 3 1 #" "
0 0 14 3 2 #"$3"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 6 #"return"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 6 #"RETURN"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 11 #"return-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$2"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 3 #"exp"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 4 #"aexp"
0 0 25 3 3 #") ("
0 0 14 3 9 #"aexp-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 4 #"aexp"
0 0 25 3 1 #" "
0 0 14 3 1 #">"
0 0 25 3 1 #" "
0 0 14 3 4 #"aexp"
0 0 25 3 3 #") ("
0 0 14 3 13 #"greater?-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$1"
0 0 25 3 1 #" "
0 0 14 3 2 #"$3"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 4 #"aexp"
0 0 25 3 1 #" "
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 4 #"aexp"
0 0 25 3 3 #") ("
0 0 14 3 13 #"smaller?-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$1"
0 0 25 3 1 #" "
0 0 14 3 2 #"$3"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 4 #"aexp"
0 0 25 3 1 #" "
0 0 14 3 2 #"=="
0 0 25 3 1 #" "
0 0 14 3 4 #"aexp"
0 0 25 3 3 #") ("
0 0 14 3 11 #"equal?-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$1"
0 0 25 3 1 #" "
0 0 14 3 2 #"$3"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 4 #"aexp"
0 0 25 3 1 #" "
0 0 14 3 2 #"!="
0 0 25 3 1 #" "
0 0 14 3 4 #"aexp"
0 0 25 3 3 #") ("
0 0 14 3 15 #"not-equal?-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$1"
0 0 25 3 1 #" "
0 0 14 3 2 #"$3"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 4 #"aexp"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 4 #"bexp"
0 0 25 3 3 #") ("
0 0 14 3 9 #"bexp-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 4 #"bexp"
0 0 25 3 1 #" "
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 4 #"aexp"
0 0 25 3 3 #") ("
0 0 14 3 10 #"minus-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$1"
0 0 25 3 1 #" "
0 0 14 3 2 #"$3"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 4 #"bexp"
0 0 25 3 1 #" "
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 4 #"aexp"
0 0 25 3 3 #") ("
0 0 14 3 9 #"plus-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$1"
0 0 25 3 1 #" "
0 0 14 3 2 #"$3"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 4 #"bexp"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 4 #"cexp"
0 0 25 3 3 #") ("
0 0 14 3 9 #"cexp-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 4 #"cexp"
0 0 25 3 1 #" "
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 14 3 4 #"bexp"
0 0 25 3 3 #") ("
0 0 14 3 9 #"mult-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$1"
0 0 25 3 1 #" "
0 0 14 3 2 #"$3"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 4 #"cexp"
0 0 25 3 1 #" "
0 0 14 3 1 #"/"
0 0 25 3 1 #" "
0 0 14 3 4 #"bexp"
0 0 25 3 3 #") ("
0 0 14 3 11 #"divide-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$1"
0 0 25 3 1 #" "
0 0 14 3 2 #"$3"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 4 #"cexp"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 4 #"cexp"
0 0 25 3 3 #") ("
0 0 14 3 8 #"neg-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 4 #"LPAR"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 14 3 4 #"RPAR"
0 0 25 3 3 #") ("
0 0 14 3 8 #"par-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 3 #"POS"
0 0 25 3 3 #") ("
0 0 14 3 11 #"posnum-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 4 #"NULL"
0 0 25 3 3 #") ("
0 0 14 3 9 #"null-expr"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 8 #"VARIABLE"
0 0 25 3 3 #") ("
0 0 14 3 8 #"var-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 4 #"TRUE"
0 0 25 3 3 #") ("
0 0 14 3 9 #"bool-expr"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 5 #"FALSE"
0 0 25 3 3 #") ("
0 0 14 3 9 #"bool-expr"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 6 #"STRING"
0 0 25 3 3 #") ("
0 0 14 3 11 #"string-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 8 #"our-list"
0 0 25 3 3 #") ("
0 0 14 3 9 #"list-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 8 #"VARIABLE"
0 0 25 3 1 #" "
0 0 14 3 7 #"listmem"
0 0 25 3 3 #") ("
0 0 14 3 12 #"listmem-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$1"
0 0 25 3 1 #" "
0 0 14 3 2 #"$2"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 8 #"our-list"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 8 #"LBRACKET"
0 0 25 3 1 #" "
0 0 14 3 10 #"listValues"
0 0 25 3 1 #" "
0 0 14 3 8 #"RBRACKET"
0 0 25 3 3 #") ("
0 0 14 3 15 #"listValues-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 8 #"LBRACKET"
0 0 25 3 1 #" "
0 0 14 3 8 #"RBRACKET"
0 0 25 3 3 #") ("
0 0 14 3 15 #"empty-list-expr"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 10 #"listValues"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 12 #"val-exp-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 14 3 5 #"COMMA"
0 0 25 3 1 #" "
0 0 14 3 10 #"listValues"
0 0 25 3 3 #") ("
0 0 14 3 24 #"extended-listValues-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$1"
0 0 25 3 1 #" "
0 0 14 3 2 #"$3"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 7 #"listmem"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 8 #"LBRACKET"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 14 3 8 #"RBRACKET"
0 0 25 3 3 #") ("
0 0 14 3 8 #"idx-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (("
0 0 14 3 8 #"LBRACKET"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 14 3 8 #"RBRACKET"
0 0 25 3 1 #" "
0 0 14 3 7 #"listmem"
0 0 25 3 3 #") ("
0 0 14 3 14 #"multi-idx-expr"
0 0 25 3 1 #" "
0 0 14 3 2 #"$2"
0 0 25 3 1 #" "
0 0 14 3 2 #"$4"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"    )))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 20 #"parse-object-to-list"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 11 #"root-object"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 13 #"unitcom-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 14 #"\"unitcom-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 17 #"unitcom-expr-ucom"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 19 #"multi-command-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 20 #"\"multi-command-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 23 #"multi-command-expr-mcom"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")) ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 23 #"multi-command-expr-ucom"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 14 #"whilecom-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 15 #"\"whilecom-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 23 #"whilecom-expr-whileexpr"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 11 #"ifcom-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 12 #"\"ifcom-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 17 #"ifcom-expr-ifexpr"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 15 #"assigncom-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 16 #"\"assigncom-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 25 #"assigncom-expr-assignexpr"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 15 #"returncom-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 16 #"\"returncom-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 25 #"returncom-expr-returnexpr"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 11 #"while-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 12 #"\"while-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 14 #"while-expr-exp"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")) ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 14 #"while-expr-com"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 8 #"if-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 9 #"\"if-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 12 #"if-expr-exp1"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")) ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 12 #"if-expr-com1"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")) ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 12 #"if-expr-com2"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 12 #"assign-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 13 #"\"assign-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 15 #"assign-expr-var"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")) ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 15 #"assign-expr-exp"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 12 #"return-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 13 #"\"return-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 15 #"return-expr-exp"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 10 #"aexp-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 11 #"\"aexp-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 13 #"expression-a1"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 14 #"greater?-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 15 #"\"greater?-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 13 #"expression-a1"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")) ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 16 #"greater?-expr-a2"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 14 #"smaller?-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 15 #"\"smaller?-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 13 #"expression-a1"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")) ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 16 #"smaller?-expr-a2"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 12 #"equal?-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 13 #"\"equal?-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 13 #"expression-a1"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")) ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 14 #"equal?-expr-a2"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 16 #"not-equal?-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 17 #"\"not-equal?-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 13 #"expression-a1"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")) ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 18 #"not-equal?-expr-a2"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 10 #"bexp-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 11 #"\"bexp-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 14 #"aexpression-b1"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 11 #"minus-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 12 #"\"minus-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 13 #"minus-expr-a1"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 10 #"plus-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 11 #"\"plus-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 12 #"plus-expr-a1"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 10 #"cexp-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 11 #"\"cexp-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 14 #"bexpression-c1"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 10 #"mult-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 11 #"\"mult-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 14 #"bexpression-c1"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")) ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 12 #"mult-expr-b1"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 12 #"divide-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 13 #"\"divide-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 14 #"bexpression-c1"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")) ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 14 #"divide-expr-b1"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 9 #"neg-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 10 #"\"neg-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 11 #"neg-expr-c1"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 9 #"par-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 10 #"\"par-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 11 #"par-expr-c1"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 12 #"posnum-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 13 #"\"posnum-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 21 #"posnum-expr-posnumber"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 10 #"null-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 11 #"\"null-expr\""
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 10 #"bool-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 11 #"\"bool-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 13 #"bool-expr-val"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 9 #"var-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 10 #"\"var-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 12 #"var-expr-var"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 12 #"string-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 13 #"\"string-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 22 #"string-expr-string-val"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 10 #"list-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 11 #"\"list-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 11 #"list-expr-l"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 13 #"listmem-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 14 #"\"listmem-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 16 #"listmem-expr-var"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")) ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 15 #"listmem-expr-lm"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 16 #"listValues-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 17 #"\"listValues-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 18 #"listValues-expr-lv"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 16 #"empty-list-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 17 #"\"empty-list-expr\""
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 13 #"val-exp-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 14 #"\"val-exp-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 15 #"listValues-exp1"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 25 #"extended-listValues-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 26 #"\"extended-listValues-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 15 #"listValues-exp1"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")) ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 27 #"extended-listValues-expr-lv"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 9 #"idx-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 10 #"\"idx-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 12 #"listmem-exp1"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 15 #"multi-idx-expr?"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 16 #"\"multi-idx-expr\""
0 0 25 3 2 #" ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 12 #"listmem-exp1"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")) ("
0 0 14 3 20 #"parse-object-to-list"
0 0 25 3 2 #" ("
0 0 14 3 17 #"multi-idx-expr-lm"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 25 3 1 #" "
0 0 14 3 11 #"root-object"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"      )))"
0 0 25 29 1 #"\n"
0           0
